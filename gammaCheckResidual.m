function gammaCheckResidual()
% This function should take in the luminance col and contrast col to make
% fits and plots.
% 'matrix' is the output matrix generated by the gamma check file,
% 'luminanceCol' depends on measuring device. 7 if PR650, 12 if XRITE.
% Contrast col is usually the first col. The matrix could be divided into 4
% sections (in rows). They are R G B W
% !!!!!!!!!!! Mean Method one rep ONLY !!!!!!!!
    matrixName = uigetfile('.csv',...
                       'Select one Check file');
    matrix = readmatrix(matrixName);

    nRow = size(matrix,1);
    nCol = size(matrix,2);
    if nCol == 11 || nCol == 10 % added 10 because longlab Gammacheck
        luminanceCol = 7;
    elseif nCol == 14
        luminanceCol = 12;
    end
    secCut = nRow/4; % how many rows in a section
    matR = matrix(1:secCut, [1 luminanceCol]);
    matG = matrix(secCut+1:2*secCut, [1 luminanceCol]);
    matB = matrix(2*secCut+1:3*secCut, [1 luminanceCol]);
    matW = matrix(3*secCut+1:4*secCut, [1 luminanceCol]);

    % fit linear models to lines, get Coefficients
    mdl_R = fitlm(matR(:,1), matR(:,2));
    r_int = table2array(mdl_R.Coefficients(1,1));
    r_slope = table2array(mdl_R.Coefficients(2,1));
    
    mdl_G = fitlm(matG(:,1), matG(:,2));
    g_int = table2array(mdl_G.Coefficients(1,1));
    g_slope = table2array(mdl_G.Coefficients(2,1));
    
    mdl_B = fitlm(matB(:,1), matB(:,2));
    b_int = table2array(mdl_B.Coefficients(1,1));
    b_slope = table2array(mdl_B.Coefficients(2,1));
    
    mdl_W = fitlm(matW(:,1), matW(:,2), 'Intercept', false); 
    w_slope = table2array(mdl_W.Coefficients(1,1));

    % plot in figrues
    xvalues = matR(:,1);
    r_fit = r_slope .* xvalues + r_int;
    g_fit = g_slope .* xvalues + g_int;
    b_fit = b_slope .* xvalues + b_int;
    w_fit = w_slope .* xvalues;

    % check differences.
    r_diff = matR(:,2)-r_fit;
    g_diff = matG(:,2)-g_fit;
    b_diff = matB(:,2)-b_fit;
    w_diff = matW(:,2)-w_fit;

    r_data = matR(:,2);
    g_data = matG(:,2);
    b_data = matB(:,2);
    w_data = matW(:,2);
     
    r_mid = r_data(find(xvalues==0.5));
    g_mid = g_data(find(xvalues==0.5));
    b_mid = b_data(find(xvalues==0.5));
    w_mid = w_data(find(xvalues==0.5));

    % Plot starts
    figure;

    subplot(3,2,1);
    yValue = r_diff/r_mid;
    plot(xvalues, r_diff/r_mid, 'ro'); hold on % this is data points
    % next is draw all lines connect to x axis
    for i = 1:secCut
        % let's say 'normal' is smaller than 1%
        if abs(yValue(i)) <= 0.01
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'k');
        else
            % abnormal results will be red lines and thicker
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'r','LineWidth',2);
        end
    end
    yline(0);
    yline(-0.01,'r');
    yline(0.01,'r');
    title('R');

    subplot(3,2,2);
    yValue = g_diff/g_mid;
    plot(xvalues, g_diff/g_mid, 'go'); hold on % this is data points
    % next is draw all lines connect to x axis
    for i = 1:secCut
        % let's say 'normal' is smaller than 1%
        if abs(yValue(i)) <= 0.01
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'k');
        else
            % abnormal results will be red lines and thicker
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'r','LineWidth',2);
        end
    end
    yline(0);
    yline(-0.01,'r');
    yline(0.01,'r');
    title('G');

    subplot(3,2,3);
    yValue = b_diff/b_mid;
    plot(xvalues, b_diff/b_mid, 'bo'); hold on % this is data points
    % next is draw all lines connect to x axis
    for i = 1:secCut
        % let's say 'normal' is smaller than 1%
        if abs(yValue(i)) <= 0.01
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'k');
        else
            % abnormal results will be red lines and thicker
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'r','LineWidth',2);
        end
    end
    yline(0);
    yline(-0.01,'r');
    yline(0.01,'r');
    title('B');

    subplot(3,2,4);
    yValue = w_diff/w_mid;
    plot(xvalues, w_diff/w_mid, 'ko'); hold on % this is data points
    % next is draw all lines connect to x axis
    for i = 1:secCut
        % let's say 'normal' is smaller than 1%
        if abs(yValue(i)) <= 0.01
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'k');
        else
            % abnormal results will be red lines and thicker
            plot([xvalues(i),xvalues(i)], [0,yValue(i)],'r','LineWidth',2);
        end
    end
    yline(0);
    yline(-0.01,'r');
    yline(0.01,'r');
    title('W');

    subplot(3,2,5);
    plot(xvalues, r_diff/r_mid, 'r',...
         xvalues, g_diff/g_mid, 'g',...
         xvalues, b_diff/b_mid, 'b',...
         xvalues, w_diff/w_mid, 'k'); hold on
    yline(-0.01,'r');
    yline(0.01,'r');
    yline(0);
    title('Deviation / Mid measure');
    legend('R','G','B','W');

    rgb_sum = r_data + g_data + b_data;
    rgb_mid = (r_mid+g_mid+b_mid)/3;
    add_diff = rgb_sum-w_data-2*(rgb_mid);
    add_diff_perc = add_diff/((rgb_mid+w_mid)/2);
    subplot(3,2,6);
    plot(xvalues, add_diff_perc, '.'); hold on
    yline(-0.01,'r');
    yline(0.01,'r');
    yline(0);
    title('Additivity');


end